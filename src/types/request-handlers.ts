import { RequestSource } from "../constants/operations"
import { HttpMethod } from "./requests"
import { Prettify } from "./utils"

// A generic middleware type
export type Middleware<TInput = any, TOutput = any> = (
  context: TInput,
  next: (ctx: TInput & Partial<TOutput>) => Promise<any>
) => Promise<any>

// Type to extract the input type from a middleware
export type ExtractInputType<T> = T extends Middleware<infer I, any> ? I : never

// Type to extract the output type from a middleware
export type ExtractOutputType<T> = T extends Middleware<any, infer O> ? O : never

// Combine input types from an array of middlewares
export type CombineInputs<T extends readonly Middleware[]> = T extends readonly [
  infer First,
  ...infer Rest,
]
  ? ExtractInputType<First> & (Rest extends readonly Middleware[] ? CombineInputs<Rest> : {})
  : {}

// Combine output types from an array of middlewares
export type CombineOutputs<T extends readonly Middleware[]> = T extends readonly [
  infer First,
  ...infer Rest,
]
  ? ExtractOutputType<First> & (Rest extends readonly Middleware[] ? CombineOutputs<Rest> : {})
  : {}

/**
 * Base request context provided when initializing the request handler.
 */
export interface BaseRequestContext {
  // Optional. If not provided, will be generated by logger. Used to track
  // request across multiple services
  correlationId?: string
  // Required. Will be used for logging and monitoring
  tags?: string[]
  // Optional. Used to track request source
  requestSource?: RequestSource
  // Optional. Used to track request endpoint
  endpoint?: string
  // Optional. Used to track request method
  method?: HttpMethod
}

/**
 * Initial request context before middleware processing. It contains
 * additional context specific to the request
 */
export type RequestContext<T extends readonly Middleware[] = []> = Prettify<
  CombineInputs<T> & BaseRequestContext
>

/**
 * Complete request handler context
 * This is a convenience type for the final context after all middleware has run.
 */
export type ServiceHandlerContext<T extends readonly Middleware[] = []> = Prettify<
  CombineOutputs<T>
>
